{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;AAWR,gBAAQ,EAAE,IAAI;;AAEd,aAAK,EAAE,EAAE,CAAC,IAAI;AACd,aAAK,EAAE,EAAE,CAAC,IAAI;AACd,cAAM,EAAE,EAAE,CAAC,IAAI;AACf,eAAO,EAAE,EAAE,CAAC,IAAI;;AAEhB,kBAAU,EAAE,EAAE,CAAC,IAAI;AACnB,mBAAW,EAAE,EAAE,CAAC,IAAI;;KAEvB;;;AAGD,UAAM,EAAE,kBAAY;;;;;AAKhB,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;AACnD,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AAC3C,YAAI,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;AACpD,YAAI,CAAC,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;;AAEtD,YAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,YAAI,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,UAAW,KAAK,EAAG;AAC/D,gBAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SACjB,CAAC,CAAC;AACP,YAAI,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,UAAW,KAAK,EAAG;AAChE,gBAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SACjB,CAAC,CAAC;KAEV;;AAED,QAAI,EAAC,cAAE,IAAI,EAAG;AACV,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;AAErB,UAAE,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;KAG7B;;AAGD,WAAO,EAAA,iBAAE,CAAC,EAAG;;;AAGT,YAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;;;AAG1B,YAAK,CAAC,IAAI,GAAG,EAAG;AACZ,gBAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAClE,MAAM;AACH,gBAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;SACpE;;;AAGD,YAAI,CAAC,YAAY,CAAC,YAAW;AAAE,gBAAI,CAAC,QAAQ,CAAC,aAAa,CAAE,CAAC,CAAE,CAAC;SAAE,EAAG,GAAG,CAAC,CAAC;KAE7E;;AAGD,SAAK,EAAC,iBAAE;;AAEJ,YAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAE5D;;AAED,UAAM,EAAC,kBAAG;;AAEN,YAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KAC7D;;CAOJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        _manager: null,\r\n        \r\n        _glow: cc.Node,\r\n        _head: cc.Node,\r\n        _hLeft: cc.Node,\r\n        _hRight: cc.Node,\r\n        \r\n        handleLeft: cc.Node,\r\n        handleRight: cc.Node\r\n        \r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n        //this._handleLeft  = cc.find('Canvas/double/handles/glow/Glow_Manijas_L');\r\n        //this._handleRight = cc.find('Canvas/double/handles/glow/Glow_Manijas_R');\r\n        \r\n        this._glow = cc.find('Canvas/double/handles/glow');\r\n        this._head = cc.find('Canvas/double/head');\r\n        this._hLeft = cc.find('Canvas/double/handles/left');\r\n        this._hRight = cc.find('Canvas/double/handles/right');\r\n\r\n        var self = this;\r\n        \r\n        this.handleLeft.on(cc.Node.EventType.TOUCH_END, function ( event ) {\r\n            self.doTouch('L');\r\n            });\r\n        this.handleRight.on(cc.Node.EventType.TOUCH_END, function ( event ) {\r\n            self.doTouch('R');\r\n            });\r\n        \r\n    },\r\n\r\n    init ( game ) {\r\n        this._manager = game;\r\n\r\n        cc.log('init Double....');\r\n        \r\n        \r\n    },\r\n    \r\n\r\n    doTouch( h ) {\r\n        \r\n        //sacamos el glow...\r\n        this._glow.active = false;\r\n        \r\n        //animamos...\r\n        if ( h == 'L' ) {\r\n            this._hLeft.getComponent(cc.Animation).play('HandleDown_Left');\r\n        } else {\r\n            this._hRight.getComponent(cc.Animation).play('HandleDown_Right');\r\n        }\r\n        \r\n        //avisamos al manager\r\n        this.scheduleOnce(function() { this._manager.doHandleTouch( h ); } , 0.8);\r\n            \r\n    },\r\n    \r\n    \r\n    doWin (){\r\n        \r\n        this._head.getComponent(cc.Animation).play('Double_Win');\r\n\r\n    },\r\n    \r\n    doLose () {\r\n        \r\n        this._head.getComponent(cc.Animation).play('Double_Lose');\r\n    },\r\n    \r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}