{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;AAEzC,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;AAUR,gBAAQ,EAAE,EAAE,CAAC,IAAI;AACjB,gBAAQ,EAAE,IAAI;KACjB;;AAED,QAAI,EAAC,cAAC,IAAI,EAAE;AACR,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KACxB;;AAED,sBAAkB,EAAC,8BAAG;AAClB,eAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;;AAElC,YAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;;KAGxB;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;;AAEtD,YAAI,GAAG,GAAG,IAAI,CAAC;;AAEf,YAAI,QAAQ,GAAG;AACX,iBAAK,EAAE,EAAE,CAAC,aAAa,CAAC,QAAQ;AAChC,wBAAY,EAAE,sBAAU,OAAO,EAAE,KAAK,EAAE;;;AAGpC,oBAAI,OAAO,IAAI,EAAE,EAAE;AAAE,uBAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,AAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;iBAAE;AACxE,oBAAI,OAAO,IAAI,EAAE,EAAE;AAAE,uBAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,AAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;iBAAE;AACzE,oBAAI,OAAO,IAAI,EAAE,EAAE;AAAE,uBAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,AAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;iBAAE;AACzE,oBAAI,OAAO,IAAI,EAAE,EAAE;AAAE,uBAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;iBAAE;aAE5C;SACJ,CAAA;;AAEL,UAAE,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;;;;;;KAQpD;;CAMJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var GameManager = require(\"GameManager\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        piramide: cc.Node,\r\n        _manager: null\r\n    },\r\n    \r\n    init (game) {\r\n        this._manager = game;\r\n    },\r\n    \r\n    botonHandlerPrueba () {\r\n        console.log('boton de Reset....');\r\n        \r\n        this._manager.play();\r\n        \r\n        //this.piramide.node.y = -350;\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.piramide = this.piramide.getComponent('Piramid');\r\n        \r\n        var tmp = this;\r\n\r\n        var listener = {\r\n            event: cc.EventListener.KEYBOARD,\r\n            onKeyPressed: function (keyCode, event) {\r\n                //cc.log('keyDown: ' + keyCode);\r\n                \r\n                if (keyCode == 66) { tmp._manager.hideAll(); tmp._manager.playBonus(); } //B\r\n                if (keyCode == 68) { tmp._manager.hideAll(); tmp._manager.playDouble(); } //D\r\n                if (keyCode == 73) { tmp._manager.hideAll(); tmp._manager.playInside(); } //I\r\n                if (keyCode == 82) { tmp._manager.restart() } //R\r\n                \r\n                }\r\n            }\r\n        \r\n        cc.eventManager.addListener(listener, this.node);\r\n\r\n        //this.node.on(cc.Node.EventType.TOUCH_END, function ( event ) {\r\n            //console.log('Mouse Down ... Movemos piramide...' + this);\r\n        //    tmp.piramide.scroll();\r\n        //});\r\n\r\n        \r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}